section .data
    num1 dw 10       ; Define a word (16-bit) variable and initialize it with value 10
    num2 dw 20       ; Define another word variable and initialize it with value 20
    res dw 0
    result db "Result: ", 0   ; Define a string to print the result

section .text
    global _start      ; Entry point for the program

_start:
    ; Addition
    mov ax, [num1]    ; Move the value of num1 into register AX
    add ax, [num2]    ; Add the value of num2 to register AX
    ; At this point, AX contains the sum of num1 and num2
    
    ; Move ax to res
    mov [res], ax
    
    ; Print the result
    mov eax, 4        ; Syscall number for write
    mov ebx, 1        ; File descriptor for stdout
    mov ecx, result   ; Address of the string to print
    mov edx, 8        ; Length of the string
    int 0x80          ; Perform syscall to print the string
    
    ; Print the value of the result
    mov eax, 4        ; Syscall number for write
    mov ebx, 1        ; File descriptor for stdout
    mov ecx, num2   ; Value of AX register (result of addition)
    mov edx, 2        ; Length of the value (since AX is 16-bit, 2 bytes)
    int 0x80          ; Perform syscall to print the value
    
    ; Exit the program
    mov eax, 1        ; Syscall number for exit
    xor ebx, ebx      ; Return 0 status
    int 0x80          ; Perform syscall
