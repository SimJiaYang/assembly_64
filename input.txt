section .data
    msg1 db "Enter a digit ", 0xA,0xD
    len1 equ $- msg1
    msg2 db "Please enter a second digit", 0xA,0xD
    len2 equ $- msg2
    msg db 'Result = ', 0xA, 0xD  ; Define a message to print before the result, including newline
    msg_len equ $- msg    ; Calculate the length of the string

section .bss
    ascii_buff resb 10      ; Reserve space for ASCII representation (up to 10 characters)
    num1 resb 2
    num2 resb 2

section .text
    global _start

_start:
    ; Message digit 1
    mov eax, 4
    mov ebx, 1
    mov ecx, msg1
    mov edx, len1
    int 0x80
    
    ; Read first digit
    mov eax, 3
    mov ebx, 0
    mov ecx, num1
    mov edx, 2
    int 0x80

    ; Message digit 2
    mov eax, 4
    mov ebx, 1
    mov ecx, msg2
    mov edx, len2
    int 0x80

    ; Read second digit
    mov eax, 3
    mov ebx, 0
    mov ecx, num2
    mov edx, 2
    int 0x80

    ; Convert the number to ASCII
    mov eax, [num1]    ; Move the value of num1 into register EAX
    add eax, [num2]    ; Add the value of num2 to register EAX

    mov esi, ascii_buff        ; Point ESI to the buffer for ASCII representation
    mov ecx, 10                ; Set up loop counter for 10 digits max

convert_loop:
    mov edx, 0                 ; Clear EDX for division
    mov ebx, 10                ; Divisor (base 10)
    div ebx                    ; Divide EAX by EBX, quotient in EAX, remainder in EDX
    add dl, '0'                ; Convert remainder to ASCII character
    dec esi                    ; Move buffer pointer backward
    mov [esi], dl              ; Store ASCII character in the buffer
    test eax, eax              ; Check if quotient is zero
    jnz convert_loop           ; If not, continue the loop

    ; Print the output message
    mov eax, 4                 ; Syscall number for sys_write
    mov ebx, 1                 ; File descriptor (stdout)
    mov ecx, msg               ; Message to print
    mov edx, msg_len           ; Message length
    int 0x80                   ; Call kernel

    ; Print the ASCII representation
    mov eax, 4                 ; Syscall number for sys_write
    mov ebx, 1                 ; File descriptor (stdout)
    mov ecx, ascii_buff        ; Address of ASCII representation
    mov edx, 10                ; Message length
    int 0x80                   ; Call kernel

    ; Exit the program
    mov eax, 1                 ; Syscall number for sys_exit
    xor ebx, ebx               ; Return 0 status
    int 0x80                   ; Call kernel
