section .text
    global _start:

_start:
    ; Input variables
    mov edx, inLen
    mov ecx, inMsg
    mov ebx, 1
    mov eax, 4
    int 0x80

    mov edx, 2
    mov ecx, num1
    mov ebx, 0
    mov eax, 3
    int 0x80

    ; Empty Line
    mov edx, newLineLen
    mov ecx, newLineMsg
    mov ebx, 1
    mov eax, 4
    int 0x80
    
    mov edx, inLen
    mov ecx, inMsg
    mov ebx, 1
    mov eax, 4
    int 0x80

    mov edx, 2
    mov ecx, num2
    mov ebx, 0
    mov eax, 3
    int 0x80
    
    ; Empty Line
    mov edx, newLineLen
    mov ecx, newLineMsg
    mov ebx, 1
    mov eax, 4
    int 0x80

    ; Put input values in correct registers
    mov eax, [num1]
    mov ebx, [num2]

    ; Perform addition
    add eax, ebx

    ; Set sum in res
    mov [res], eax

    ; Output Message
    mov edx, resLen
    mov ecx, resMsg
    mov ebx, 1
    mov eax, 4
    int 0x80
    
    ; Output Result
    mov edx, 1
    mov ecx, res
    mov ebx, 1
    mov eax, 4
    int 0x80
    
    ; Empty Line
    mov edx, newLineLen
    mov ecx, newLineMsg
    mov ebx, 1
    mov eax, 4
    int 0x80

    ; Exit program
    mov eax, 1
    int 0x80
    
section .bss
    num1    resb 2
    num2    resb 2
    res resb 2
    

section .data
    inMsg db "Input number: ",0xA
    inLen equ $-inMsg
    resMsg db "Result: ",0xA
    resLen equ $-resMsg
    newLineMsg db 0xA, 0xD
    newLineLen equ $-newLineMsg