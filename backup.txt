
section .data
    num1 dd 20       ; Define a word (16-bit) variable and initialize it with value 10
    num2 dd 15       ; Define another word variable and initialize it with value 20
    result      dd  0  ; Predefined number to convert
    output_msg  dd  'Result: 20 + 15 = ' 

section .bss
    ascii_buff  resb 11       ; Reserve space for ASCII representation (up to 10 characters)

section .text
    global _start

_start:
    ; Addition
    mov ax, [num1]    ; Move the value of num1 into register AX
    add ax, [num2]    ; Add the value of num2 to register AX
    ; At this point, AX contains the sum of num1 and num2
    
    ; Move ax to result
    mov [result], ax
    
    ; Convert the number to ASCII
    mov eax, dword [result]    ; Load the predefined input number into EAX
    mov esi, ascii_buff        ; Point ESI to the buffer for ASCII representation
    mov ecx, 10                ; Set up loop counter for 10 digits max
    
convert_loop:
    mov edx, 0                 ; Clear EDX for division
    mov ebx, 10                ; Divisor (base 10)
    div ebx                    ; Divide EAX by EBX, quotient in EAX, remainder in EDX
    add dl, '0'                ; Convert remainder to ASCII character
    dec esi                    ; Move buffer pointer backward
    mov [esi], dl              ; Store ASCII character in the buffer
    test eax, eax              ; Check if quotient is zero
    jnz convert_loop           ; If not, continue the loop
    
    ; Print the ASCII representation
    mov eax, 4                 ; Syscall number for sys_write
    mov ebx, 1                 ; File descriptor (stdout)
    mov ecx, output_msg        ; Message to print
    mov edx, 20                ; Message length
    int 0x80                   ; Call kernel

    ; Calculate the length of the ASCII representation
    sub esi, ascii_buff        ; Calculate the length of ASCII representation
    neg esi                    ; Negate to get the positive length
    mov edx, esi               ; Length to print

    ; Print the ASCII representation
    mov eax, 4                 ; Syscall number for sys_write
    mov ebx, 1                 ; File descriptor (stdout)
    mov ecx, esi               ; Address of ASCII representation
    int 0x80                   ; Call kernel

    ; Exit the program
    mov eax, 1                 ; Syscall number for sys_exit
    xor ebx, ebx               ; Return 0 status
    int 0x80                   ; Call kernel
