section .data
    num1 dd 20       ; Define a double word (32-bit) variable and initialize it with value 10
    num2 dd 20       ; Define another double word variable and initialize it with value 20
    result_text dw 'Result : ',0xA; Define a null-terminated string to print before the result
    result_text_len equ $ - result_text    ; Calculate the length of the string

section .bss
    ascii_buff resb 10       ; Reserve space for ASCII representation (up to 10 characters)
    ascii_len equ $ - ascii_buff
    
section .text
    global _start      ; Entry point for the program

_start:
    ; Addition
    mov eax, [num1]    ; Move the value of num1 into register EAX
    add eax, [num2]    ; Add the value of num2 to register EAX
    
    ; Convert the number to ASCII
    mov esi, ascii_buff        ; Point ESI to the buffer for ASCII representation
    mov ecx, 10                ; Set up loop counter for 10 digits max
    
convert_loop:
    mov edx, 0                 ; Clear EDX for division
    mov ebx, 10                ; Divisor (base 10)
    div ebx                    ; Divide EAX by EBX, quotient in EAX, remainder in EDX
    add dl, '0'                ; Convert remainder to ASCII character
    dec esi                    ; Move buffer pointer backward
    mov [esi], dl              ; Store ASCII character in the buffer
    test eax, eax              ; Check if quotient is zero
    jnz convert_loop           ; If not, continue the loop
    
    ; Print the text "Result:"
    mov rax, 1         ; Syscall number for write
    mov rdi, 1         ; File descriptor (1 for stdout)
    mov rsi, result_text ; Pointer to the result_text buffer
    mov rdx, result_text_len ; Length of the string
    syscall            ; Perform syscall to print
    
    ; Print the ASCII representation
    mov eax, 4                 ; Syscall number for sys_write
    mov ebx, 1                 ; File descriptor (stdout)
    mov edx, ascii_len         ; Length of the ASCII representation
    mov ecx, ascii_buff        ; Address of ASCII representation
    syscall                    ; Call kernel

    ; Exit the program
    mov eax, 60        ; Syscall number for exit
    xor edi, edi       ; Return 0 status
    syscall            ; Perform syscall to exit