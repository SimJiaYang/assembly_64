section .data
    num1 dw 10       ; Define a word (16-bit) variable and initialize it with value 10
    num2 dw 20       ; Define another word variable and initialize it with value 20

section .text
    global _start      ; Entry point for the program

_start:
    ; Addition
    mov ax, [num1]    ; Move the value of num1 into register AX
    add ax, [num2]    ; Add the value of num2 to register AX
    ; At this point, AX contains the sum of num1 and num2
    
    ; Subtraction
    mov bx, [num1]    ; Move the value of num1 into register BX
    sub bx, [num2]    ; Subtract the value of num2 from register BX
    ; At this point, BX contains the result of num1 - num2
    
    ; Multiplication
    mov cx, [num1]    ; Move the value of num1 into register CX
    imul cx, [num2]   ; Multiply the value of CX by the value of num2
    ; At this point, CX contains the result of num1 * num2

    ; Division
    mov dx, 0         ; Clear DX register (used for high word of dividend in 32-bit division)
    mov ax, [num1]    ; Move the value of num1 into register AX
    cwd               ; Sign extend AX into DX:AX (prepare for division)
    idiv word [num2]  ; Divide DX:AX by the value of num2 (16-bit division)
    ; Quotient is stored in AX, remainder in DX

    ; You can optionally do something with the results here
    ; For example, you can move them to other variables or print them
    
    ; Exit the program
    mov eax, 1        ; Syscall number for exit
    xor ebx, ebx      ; Return 0 status
    int 0x80          ; Perform syscall

