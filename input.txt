section .data
    msg1 db 'Enter the first number: ',0xA,0
    msg1_len equ $-msg1-1
    msg2 db 'Enter the second number: ',0xA,0
    msg2_len equ $-msg2-1
    msg db 'Result = ',0xA
    msg_len equ $-msg-1

section .bss
    num1 resb 6 ; Reserve 6 bytes, including space for null terminator
    num2 resb 6 ; Reserve 6 bytes, including space for null terminator
    ascii_buff resb 10

section .text
    global _start

_start:
    ; Initialize num1 and num2 with zeros (null terminators)
    mov ecx, num1
    mov byte [ecx], 0
    mov ecx, num2
    mov byte [ecx], 0

    ; Print the first message
    mov eax, 4
    mov ebx, 1
    mov ecx, msg1
    mov edx, msg1_len
    int 0x80

    ; Read the first number
    mov eax, 3
    mov ebx, 0
    mov ecx, num1
    mov edx, 5 ; Read up to 5 characters (including '\n')
    int 0x80

    ; Print the second message
    mov eax, 4
    mov ebx, 1
    mov ecx, msg2
    mov edx, msg2_len
    int 0x80

    ; Read the second number
    mov eax, 3
    mov ebx, 0
    mov ecx, num2
    mov edx, 5 ; Read up to 5 characters (including '\n')
    int 0x80

    ; Convert the numbers to integers
    mov eax, [num1]
    sub eax, '0'
    mov ebx, [num2]
    sub ebx, '0'

    ; Addition
    add eax, ebx

    ; Convert the number to ASCII
    mov esi, ascii_buff
    mov ecx, 10

convert_loop:
    mov edx, 0
    mov ebx, 10
    div ebx
    add dl, '0'
    dec esi
    mov [esi], dl
    test eax, eax
    jnz convert_loop

    ; Print the output message
    mov eax, 4
    mov ebx, 1
    mov ecx, msg
    mov edx, msg_len
    int 0x80

    ; Print the ASCII representation
    mov eax, 4
    mov ebx, 1
    mov ecx, esi
    mov edx, 10
    int 0x80

    ; Exit the program
    mov eax, 1
    xor ebx, ebx
    int 0x80
